// // const assert = require('assert');

// // function division(x, y) {
// //   return x / y;
// // }

// // const expected = division(9, 3);

// // assert.strictEqual(expected, 3, 'Nove dividido por trÃªs Ã© igual a trÃªs');

// const assert = require('assert');

// function add(a, b) {
//   return a + b;
// }

// const expected = add(1, 2);

// assert.ok(expected === 3, 'Um mais dois Ã© igual a trÃªs'); // Checa se o primeiro argumento Ã© verdadeiro
// assert.strictEqual(expected, 3, 'Um mais dois Ã© igual a trÃªs'); // Checa se o primeiro e segundo argumentos sÃ£o iguais em valor e tipo (===)
// assert.notStrictEqual(expected, 4, 'Um mais dois Ã© igual a trÃªs (e nÃ£o quatro!)'); // Checa se o primeiro e segundo argumentos sÃ£o diferentes (!==)

const assert = require('assert');

const list1 = [1, 2, 3, 4, 5];
const list2 = [1, 2, 3, 4, 5];

assert.deepStrictEqual(list1, list2, 'Erro: list1 e list2 nÃ£o sÃ£o estritamente iguais');

const person1 = { name: 'john', age: 21 };
const person2 = { name: 'john', age: 21 };

assert.deepStrictEqual(person1, person2, 'Erro: person1 e person2 nÃ£o sÃ£o estritamente iguais');

const person3 = { name: 'john', age: 19 };

assert.notDeepStrictEqual(person1, person3, 'Erro: os valores dos objetos sÃ£o estritamente iguais');

const soma = (num1, num2) => num1 + num2;

assert.strictEqual(soma(2, 3), 5);

const name1 = 'Ada';
const name2 = 'Leon';

assert.notDeepStrictEqual(name1, name2, 'Diferentes');


// function division(x, y) {
//   return x / y;
// }

// // declaraÃ§Ã£o da funÃ§Ã£o division, definida anteriormente...

// assert.strictEqual(division(10, 2), 5); // OK
// assert.strictEqual(division(10, 5), 2); // ðŸ’£

// const assert = require('assert');

function division(x, y) {
  // Queremos que o cÃ³digo retorne um erro com uma mensagem especÃ­fica
  // caso o parÃ¢metro y seja 0. Por isso lanÃ§amos uma exceÃ§Ã£o se essa condiÃ§Ã£o
  // for verdadeira, o que irÃ¡ interromper a execuÃ§Ã£o da funÃ§Ã£o.

  if (y === 0) throw new Error('parameter y must not be 0');
  return x / y;
}
assert.strictEqual(division(10, 2), 5); // OK

assert.throws(() => { division(10, 0); }, /^Error: parameter y must not be 0$/); // OK